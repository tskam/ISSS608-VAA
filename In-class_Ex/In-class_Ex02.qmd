---
title: "In-class Exercise 2: Visualising Distribution"
author: "Dr. Kam Tin Seong<br/>Assoc. Professor of Information Systems (Practice)"
institute: "School of Computing and Information Systems,<br/>Singapore Management University"
date: "`r Sys.Date()`"
format: 
  revealjs:
    width: 1600
    height: 900
    show-notes: false
    slide-number: true
    show-slide-number: 'all'
date-format: "MM DD, YYYY"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
editor: visual
---

## Content

## Getting Started

### Loading R packages

::: panel-tabset
### The task

In this hands-on exercise, the following R packages will be used: tidyverse, ggdist and ggthemes. Using the method you learned in previous lesson, load the R packages into RStudio environment.

### The code

```{r}
pacman::p_load(tidyverse, ggdist, ggridges,
               colorspace, ggthemes)
```

Before we move on to the next step, it is always a good practice to visit
:::

### Importing the data

::: panel-tabset
### The task

For the purpose of this *Exam_data.csv* will be used. Using the step you learned in previous lesson, import *Exam_data.csv* into RStudio as a tibble data.frame.

### The code

```{r}
exam_df <- read_csv("data/Exam_data.csv")
```
:::

## Visualising Distribution

### Histogram

::: panel-tabset
### The task

Using the step you learned, build a histogram as shown below.

```{r}
#| echo: false
ggplot(data=exam_df, 
       aes(x = ENGLISH)) +
  geom_histogram(color = "black",
                 fill = "light blue")       
```

### The code

```{r}
#| eval: false
ggplot(data=exam_df, 
       aes(x = ENGLISH)) +
  geom_histogram(color = "black",
                 fill = "light blue")       
```
:::

------------------------------------------------------------------------

### Probability density plot

::: panel-tabset
## The task

Build a probability density plot of English score as shown below.

```{r}
#| echo: false
ggplot(exam_df, 
       aes(x = ENGLISH)) +
  geom_density(
    color = "#1696d2",
    adjust = .65,
    alpha = .6
  )
```

## The code

```{r}
#| eval: false
ggplot(exam_df, 
       aes(x = ENGLISH)) +
  geom_density(
    color = "#1696d2",
    adjust = .65,
    alpha = .6
  )
```
:::

------------------------------------------------------------------------

### The alternative design

::: panel-tabset
## The task

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 6

median_eng <- median(exam_df$ENGLISH)
mean_eng <- mean(exam_df$ENGLISH)
std_eng <- sd(exam_df$ENGLISH)

ggplot(exam_df, 
       aes(x = ENGLISH)) +
  geom_density(
    color = "#1696d2",
    adjust = .65,
    alpha = .6) +
  stat_function(
    fun = dnorm,
    args = list(mean = mean_eng,
                sd = std_eng),
    col = "grey30",
    size = .8) +
  geom_vline(
    aes(xintercept = mean_eng),
    colour="#4d5887", 
    linewidth = .6, 
    linetype = "dashed") +
  annotate(geom = "text", 
           x = mean_eng - 8, 
           y = 0.04,
           label = paste0("Mean ENGLISH: ",
                          round((mean_eng), 2)),
           color = "#4d5887") +
  geom_vline(
    aes(xintercept = median_eng),
    colour = "#00AFBB", 
    linewidth = .6, 
    linetype = "dashed") +
  annotate(geom = "text", 
           x = median_eng + 8, 
           y = 0.04,
           label = paste0("Median ENGLISH: ", 
                   round((median_eng),2)),
    color = "#00AFBB") +
  labs(
    title = "Uneven Distribution of ENGLISH Score across Participants",
    subtitle = "Median ENGLISH score is close to Mean score, but distribution density reveals multiple peaks and troughs",
    x = "ENGLISH Score") +
  theme(
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    panel.grid.major = element_blank(),
    plot.background = element_rect(
      fill="#F8F3E6",
      colour="#F8F3E6")
  )
```

## The code

```{r}
#| eval: false
#| fig-width: 10
#| fig-height: 6

median_eng <- median(exam_df$ENGLISH)
mean_eng <- mean(exam_df$ENGLISH)
std_eng <- sd(exam_df$ENGLISH)

ggplot(exam_df, 
       aes(x = ENGLISH)) +
  geom_density(
    color = "#1696d2",
    adjust = .65,
    alpha = .6) +
  stat_function(
    fun = dnorm,
    args = list(mean = mean_eng,
                sd = std_eng),
    col = "grey30",
    size = .8) +
  geom_vline(
    aes(xintercept = mean_eng),
    colour="#4d5887", 
    linewidth = .6, 
    linetype = "dashed") +
  annotate(geom = "text", 
           x = mean_eng - 8, 
           y = 0.04,
           label = paste0("Mean ENGLISH: ",
                          round((mean_eng), 2)),
           color = "#4d5887") +
  geom_vline(
    aes(xintercept = median_eng),
    colour = "#00AFBB", 
    linewidth = .6, 
    linetype = "dashed") +
  annotate(geom = "text", 
           x = median_eng + 8, 
           y = 0.04,
           label = paste0("Median ENGLISH: ", 
                   round((median_eng),2)),
    color = "#00AFBB") +
  labs(
    title = "Uneven Distribution of ENGLISH Score across Participants",
    subtitle = "Median ENGLISH score is close to Mean score, but distribution density reveals multiple peaks and troughs",
    x = "ENGLISH Score") +
  theme(
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    panel.grid.major = element_blank(),
    plot.background = element_rect(
      fill="#F8F3E6",
      colour="#F8F3E6")
  )
```
:::

## Visualising Distribution with Ridgeline Plot

::: columns
::: {.column width="65%"}
::: {style="font-size: 0.8em"}
*Ridgeline plot* (sometimes called *Joyplot*) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.
:::

```{r}
#| echo: false
ggplot(exam_df, 
       aes(x = ENGLISH, 
           y = CLASS)) + 
  geom_density_ridges(rel_min_height = 0.02) +
  theme_ridges()
```
:::

::: {.column width="35%"}
::: callout-note
-   Ridgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take too much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.

-   It works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.
:::
:::
:::

------------------------------------------------------------------------

### Plotting ridgeline graph: ggridges method

::: {style="font-size: 0.7em"}
There are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using [ggridges](https://wilkelab.org/ggridges/index.html) package. ggridges package provides two main geom to plot gridgeline plots, they are: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines. The ridgeline plot below is plotted by using `geom_density_ridges()`.
:::

::: panel-tabset
### The plot

```{r}
#| echo: false
ggplot(exam_df, 
       aes(x = ENGLISH, 
           y = CLASS)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#7097BB", .3),
    color = "white") +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

### The code chunk

::: {style="font-size: 1.25em"}
```{r}
#| eval: false
ggplot(exam_df, 
       aes(x = ENGLISH, 
           y = CLASS)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#7097BB", .3),
    color = "white") +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```
:::
:::

------------------------------------------------------------------------

### Varying fill colors along the x axis

::: {style="font-size: 0.7em"}
Sometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html). Both geoms work just like `geom_ridgeline()` and `geom_density_ridges()`, except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.
:::

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(exam_df, 
       aes(x = ENGLISH, 
           y = CLASS,
           fill = stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]",
                       option = "C") +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

## The code chunk

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(exam_df, 
       aes(x = ENGLISH, 
           y = CLASS,
           fill = stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]",
                       option = "C") +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```
:::
:::

------------------------------------------------------------------------

### Mapping the probabilities directly onto colour

::: {style="font-size: 0.7em"}
Beside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2. Figure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.
:::

::: panel-tabset
### The plot

```{r}
#| echo: false
ggplot(exam_df,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = 0.5 - abs(0.5-stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Tail probability", direction = -1) +
  theme_ridges()
```

### The code chunk

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(exam_df,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = 0.5 - abs(0.5-stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Tail probability",
                       direction = -1) +
  theme_ridges()
```
:::
:::

::: callout-important
It is important include the argument `calc_ecdf = TRUE` in `stat_density_ridges()`.
:::

------------------------------------------------------------------------

### Ridgeline plots with quantile lines

::: {style="font-size: 0.7em"}
By using [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic as shown in the figure below.
:::

::: panel-tabset
### The plot

```{r}
#| echo: false
ggplot(exam_df,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()
```

### The code chunk

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(exam_df,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()
  
```
:::
:::

------------------------------------------------------------------------

### Ridgeline plots with quantile lines

::: {style="font-size: 0.7em"}
Instead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.
:::

::: panel-tabset
### The plot

```{r}
#| echo: false
ggplot(exam_df,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = c(0.025, 0.975)
    ) +
  scale_fill_manual(
    name = "Probability",
    values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
  ) +
  theme_ridges()
```

### The code chunk

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(exam_df,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = c(0.025, 0.975)
    ) +
  scale_fill_manual(name = "Probability",
    values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
  ) +
  theme_ridges()
```
:::
:::

## Visualising Distribution and Summary Statistics: Boxplot method

::: panel-tabset
## The task

```{r}
#| echo: false
ggplot(data = exam_df,
       aes(y = ENGLISH,
           x = RACE)) +
  geom_boxplot()
```

## The code

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(data = exam_df,
       aes(y = ENGLISH,
           x = RACE)) +
  geom_boxplot()
```
:::
:::

------------------------------------------------------------------------

### The alternative boxplot design

::: panel-tabset
## The task

```{r}
#| echo: false
## function to return median and labels
n_fun <- function(x){
  return(data.frame(y = median(x) + 2.5, 
                    label = paste0("n = ",length(x))))
}

ggplot(data = exam_df,
       aes(y = ENGLISH,
           x = RACE)) +
  geom_boxplot() +
  stat_summary(
    geom = "text",
    fun.data = n_fun,
    size = 3.5)
```

## The code

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
## function to return median and labels
n_fun <- function(x){
  return(data.frame(y = median(x) + 2.5, 
                    label = paste0("n = ",length(x))))
}

ggplot(data = exam_df,
       aes(y = ENGLISH,
           x = RACE)) +
  geom_boxplot() +
  stat_summary(
    geom = "text",
    fun.data = n_fun,
    size = 3.5)
```
:::
:::

------------------------------------------------------------------------

### Alternative boxplot design

::: panel-tabset
## The task

```{r}
#| echo: false
ggplot(data = exam_df,
       aes(y = ENGLISH,
           x = RACE)) +
  geom_boxplot(fill = "light blue", 
               varwidth = TRUE)
```

## The code

::: {style="font-size: 1.2em"}
```{r}
#| echo: false
ggplot(data = exam_df,
       aes(y = ENGLISH,
           x = RACE)) +
  geom_boxplot(fill = "light blue", 
               varwidth = TRUE)

```
:::
:::

## Visualising Distribution and Summary Statistics

### Violin plot method

::: panel-tabset
## The task

```{r}
#| echo: false
ggplot(data = exam_df,
       aes(y = ENGLISH,
           x = RACE)) +
  geom_violin()
```

## The code

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(data = exam_df,
       aes(y = ENGLISH,
           x = RACE)) +
  geom_violin()
```
:::
:::

------------------------------------------------------------------------

### Combining Violin plot and boxplot

::: panel-tabset
## The task

```{r}
#| echo: false

# sample size
sample_size = exam_df %>% 
  group_by(RACE) %>% 
  summarize(num=n())

exam_df %>%
  left_join(sample_size) %>%
  mutate(myaxis = paste0(RACE, "\n", "n=", num)) %>%
  ggplot(aes(y = ENGLISH,
           x = myaxis)) +
  geom_violin() +
  geom_boxplot(width=0.3, color="grey") +
  geom_point(stat="summary",        
             fun.y="mean",           
             colour ="red",          
             size=4) +
  ggtitle("A Violin wrapping a boxplot") +
  xlab("")

```

## The code

::: {style="font-size: 1.2em"}
```{r}
#| eval: false

sample_size = exam_df %>% 
  group_by(RACE) %>% 
  summarize(num=n())

exam_df %>%
  left_join(sample_size) %>%
  mutate(myaxis = paste0(RACE, "\n", "n=", num)) %>%
  ggplot(aes(y = ENGLISH,
           x = myaxis)) +
  geom_violin() +
  geom_boxplot(width=0.3, color="grey") +
  geom_point(stat="summary", fun.y="mean",           
             colour ="red", size=4) +
  ggtitle("A Violin wrapping a boxplot") +
  xlab("")
```
:::
:::

## Introducing Raincloud Plot

The raincloud plot combines a ‘split-half violin’ (an un-mirrored PDF plotted against the redundant data axis), raw jittered data points, and a standard visualization of central tendency (i.e., mean or median) and error, such as a boxplot.

![](img/image2-2.png)

------------------------------------------------------------------------

### Plotting a Half Eye graph

First, we will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package.

This produces a Half Eye visualization, which is contains a half-density and a slab-interval.

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(exam_df, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)
```

## The code chunk

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(exam_df, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)
```
:::

::: callout-tip
## Things to learn from the code chunk above

We remove the slab interval by setting .width = 0 and point_colour = NA.
:::
:::

------------------------------------------------------------------------

### Adding the boxplot with `geom_boxplot()`

Next, we will add the second geometry layer using [`geom_boxplot()`]() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(exam_df, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)
```

## The code chunk

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(exam_df, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)
```
:::
:::

------------------------------------------------------------------------

### Adding the Dot Plots with `stat_dots()`

Next, we will add the third geometry layer using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = "left" to indicate we want it on the left-hand side.

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(exam_df, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)
```

## The code chunk

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(exam_df, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)
```
:::
:::

------------------------------------------------------------------------

### Finishing touch

Lastly, [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, `theme_economist()` of ggthemes package is used to give the raincloud chart a professional publishing standard look.

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(exam_df, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  coord_flip() +
  theme_economist()
```

## The code chunk

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(exam_df, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  coord_flip() +
  theme_economist()
```
:::
:::
